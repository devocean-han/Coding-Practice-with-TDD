const { solution } = require('./leet36-유효한 스도쿠');

describe('Valid Sudoku (empty board, etc. edge cases)', () => {
	[
		{ // empty board: 
			testPurpose: " empty board: ",
			board: [[".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]], result: true
		},
		
	].forEach(({ testPurpose, board, result }) => {
		it(`${testPurpose} ${result} \n[` +
			board.map((row) => `[${row}]\n`) + `]`, () => {
			expect(solution(board)).toEqual(result);
		});
	});
});

describe('Valid Sudoku (row duplicate check)', () => {
	[
		{ // first row has duplicate: 
			testPurpose: " first row has duplicate: ",
			board: [["1", "2", "3", ".", ".", ".", "7", "8", "1"]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]], result: false
		},
		{ // second row has duplicate: 
			testPurpose: " second row has duplicate: ",
			board: [[".", ".", ".", ".", ".", ".", ".", ".", "."]
			, ["1", "2", "3", ".", ".", ".", "7", "8", "1"]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]
			, [".", ".", ".", ".", ".", ".", ".", ".", "."]], result: false
		},
		
	].forEach(({ testPurpose, board, result }) => {
		it(`${testPurpose} ${result} : \n[` +
			board.map((row) => `[${row}]\n`) + `]`, () => {
			expect(solution(board)).toEqual(result);
		});
	});
});

describe('Valid Sudoku (column duplicate check)', () => {
	[
		{ // first column duplicate: 
			testPurpose: " first column duplicate: ",
			board: [["1", ".", ".", ".", ".", ".", ".", ".", "."]
				, ["2", ".", ".", ".", ".", ".", ".", ".", "."]
				, ["3", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, ["7", ".", ".", ".", ".", ".", ".", ".", "."]
				, ["8", ".", ".", ".", ".", ".", ".", ".", "."]
				, ["1", ".", ".", ".", ".", ".", ".", ".", "."]], result: false
		},
		{ // fourth column duplicate: 
			testPurpose: " fourth column duplicate: ",
			board: [["1", ".", ".", "2", ".", ".", ".", ".", "."]
				, ["2", ".", ".", "3", ".", ".", ".", ".", "."]
				, ["3", ".", ".", "1", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, ["7", ".", ".", "8", ".", ".", ".", ".", "."]
				, ["8", ".", ".", "9", ".", ".", ".", ".", "."]
				, ["9", ".", ".", "1", ".", ".", ".", ".", "."]], result: false
		},
		
	].forEach(({ testPurpose, board, result }) => {
		it(`${testPurpose} ${result} \n[` +
			board.map((row) => `[${row}]\n`) + `]`, () => {
			expect(solution(board)).toEqual(result);
		});
	});
});

describe('Valid Sudoku (subsquare duplicate check)', () => {
	[
		{ // first sub square duplicate: 
			testPurpose: " first sub square duplicate: ",
			board: [["1", ".", ".", ".", ".", ".", ".", ".", "."]
				, ["2", "1", ".", ".", ".", ".", ".", ".", "."]
				, ["3", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]], result: false
		},
		{ // 6th sub square duplicate: 
			testPurpose: " 6th sub square duplicate: ",
			board: [["1", ".", ".", ".", ".", ".", ".", ".", "."]
				, ["2", "4", ".", ".", ".", ".", ".", ".", "."]
				, ["3", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", "1", "2", "3"]
				, [".", ".", ".", ".", ".", ".", ".", "1", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]], result: false
		},
		{ // 6th sub square duplicate: 
			testPurpose: " non duplicate: ",
			board: [["1", ".", ".", ".", ".", ".", ".", ".", "."]
				, ["2", "4", ".", ".", ".", ".", ".", ".", "."]
				, ["3", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", "1", "2", "3"]
				, [".", ".", ".", ".", ".", ".", ".", "4", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]
				, [".", ".", ".", ".", ".", ".", ".", ".", "."]], result: true
		},
		{ // 6th sub square duplicate: 
			testPurpose: " true: ",
			board: [["5","3",".",".","7",".",".",".","."]
			,["6",".",".","1","9","5",".",".","."]
			,[".","9","8",".",".",".",".","6","."]
			,["8",".",".",".","6",".",".",".","3"]
			,["4",".",".","8",".","3",".",".","1"]
			,["7",".",".",".","2",".",".",".","6"]
			,[".","6",".",".",".",".","2","8","."]
			,[".",".",".","4","1","9",".",".","5"]
			,[".",".",".",".","8",".",".","7","9"]], result: true
		},
		{ // 6th sub square duplicate: 
			testPurpose: " 1st subsquare being duplicate (same as above except change of first number '5' -> '8'): ",
			board: [["8","3",".",".","7",".",".",".","."]
			,["6",".",".","1","9","5",".",".","."]
			,[".","9","8",".",".",".",".","6","."]
			,["8",".",".",".","6",".",".",".","3"]
			,["4",".",".","8",".","3",".",".","1"]
			,["7",".",".",".","2",".",".",".","6"]
			,[".","6",".",".",".",".","2","8","."]
			,[".",".",".","4","1","9",".",".","5"]
			,[".",".",".",".","8",".",".","7","9"]], result: false
		},
		
	].forEach(({ testPurpose, board, result }) => {
		it(`${testPurpose} ${result} \n[` +
			board.map((row) => `[${row}]\n`) + `]`, () => {
			expect(solution(board)).toEqual(result);
		});
	});
});