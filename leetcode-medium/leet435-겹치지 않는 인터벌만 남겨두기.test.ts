import source from './leet435-겹치지 않는 인터벌만 남겨두기';
const { solution } = source;

describe('Non-overlapping Intervals', () => {
	describe('Example 1: intervals=[[1,2],[2,3],[3,4],[1,3]]', () => {
		let intervals: number[][] = [[1, 2], [2, 3], [3, 4], [1, 3]];
		it(`should return 1 leaving intervals [[1,2],[2,3],[3,4]]`, () => {
			expect(solution(intervals)).toBe(1);
		});
	});

	describe('Example 2: intervals=[[1,2],[1,2],[1,2]]', () => {
		let intervals: number[][] = [[1,2],[1,2],[1,2]];
		it(`should return 2 leaving intervals [[1,2]]`, () => {
			expect(solution(intervals)).toBe(2);
		});
	});
	
	describe('Example 3: intervals=[[1,2],[2,3]]', () => {
		let intervals: number[][] = [[1,2],[2,3]];
		it(`should return 0 leaving intervals [[1,2],[2,3]]`, () => {
			expect(solution(intervals)).toBe(0);
		});
	});
	
	describe('Error Case 33/58: intervals=[[-52,31],[-73,-26],[82,97],[-65,-11],[-62,-49],[95,99],[58,95],[-31,49],[66,98],[-63,2],[30,47],[-40,-26]]', () => {
		let intervals: number[][] = [[-52,31],[-73,-26],[82,97],[-65,-11],[-62,-49],[95,99],[58,95],[-31,49],[66,98],[-63,2],[30,47],[-40,-26]];
		it(`should return 7 leaving intervals ....`, () => {
			expect(solution(intervals)).toBe(7);
		});
	});
	
	describe('Error Case 34/58: intervals=[[-25322,-4602],[-35630,-28832],[-33802,29009],[13393,24550],[-10655,16361],[-2835,10053],[-2290,17156],[1236,14847],[-45022,-1296],[-34574,-1993],[-14129,15626],[3010,14502],[42403,45946],[-22117,13380],[7337,33635],[-38153,27794],[47640,49108],[40578,46264],[-38497,-13790],[-7530,4977],[-29009,43543],[-49069,32526],[21409,43622],[-28569,16493],[-28301,34058]]', () => {
		let intervals: number[][] = [[-25322,-4602],[-35630,-28832],[-33802,29009],[13393,24550],[-10655,16361],[-2835,10053],[-2290,17156],[1236,14847],[-45022,-1296],[-34574,-1993],[-14129,15626],[3010,14502],[42403,45946],[-22117,13380],[7337,33635],[-38153,27794],[47640,49108],[40578,46264],[-38497,-13790],[-7530,4977],[-29009,43543],[-49069,32526],[21409,43622],[-28569,16493],[-28301,34058]];
		it(`should return 19 leaving intervals ....`, () => {
			expect(solution(intervals)).toBe(19);
		});
	});
});